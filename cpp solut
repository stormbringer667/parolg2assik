#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <omp.h>
#include <cstdlib>

void write_csv(const std::vector<std::vector<double>> &grid, const std::string &filename) {
    std::ofstream file(filename);
    for (const auto &row : grid) {
        for (size_t j = 0; j < row.size(); ++j) {
            file << row[j];
            if (j < row.size() - 1)
                file << ",";
        }
        file << "\n";
    }
    file.close();
}
int main(int argc, char *argv[]) {
    if (argc != 3) {
        std::cerr << "Usage: " << argv[0] << " <grid size N> <tolerance epsilon>\n";
        return 1;
    }
    int N = std::atoi(argv[1]);
    double epsilon = std::atof(argv[2]);
    std::vector<std::vector<double>> current(N, std::vector<double>(N, 0.0));
    std::vector<std::vector<double>> next(N, std::vector<double>(N, 0.0));
    for (int j = 0; j < N; ++j) {
        current[0][j] = 100.0;
        next[0][j] = 100.0;
    }
    const int max_iter = 10000;
    double max_diff;
    int iter = 0;
    do {
        max_diff = 0.0;
        #pragma omp parallel for collapse(2) reduction(max:max_diff)
        for (int i = 1; i < N - 1; ++i) {
            for (int j = 1; j < N - 1; ++j) {
                next[i][j] = 0.25 * (current[i-1][j] + current[i+1][j] +
                                     current[i][j-1] + current[i][j+1]);
                double diff = std::fabs(next[i][j] - current[i][j]);
                if (diff > max_diff)
                    max_diff = diff;
            }
        }
        std::swap(current, next);
        iter++;
        if (iter >= max_iter) {
            std::cout << "Reached max iterations without full convergence.\n";
            break;
        }
    } while (max_diff > epsilon);
    std::cout << "Converged in " << iter << " iterations.\n";
    write_csv(current, "temperature_distribution.csv");
    return 0;
}
